{"version":3,"sources":["img sync /^/.//.*/.png$","img/animal.png","img/building.png","img/city.png","img/earth.png","img/energy.png","img/event.png","img/jovian.png","img/leaf.png","img/microbe.png","img/science.png","img/space.png","img/terraforming-mars-icons.png","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","App","props","isLocalStorageSupported","localStorage","setItem","getItem","state","resetValues","values","JSON","parse","this","stringify","setState","earth","jovian","science","space","building","event","city","energy","animal","leaf","microbe","storeStates","className","key","onClick","style","backgroundImage","require","class","type","window","confirm","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69436786.chunk.js","sourcesContent":["var map = {\n\t\"./animal.png\": 16,\n\t\"./building.png\": 17,\n\t\"./city.png\": 18,\n\t\"./earth.png\": 19,\n\t\"./energy.png\": 20,\n\t\"./event.png\": 21,\n\t\"./jovian.png\": 22,\n\t\"./leaf.png\": 23,\n\t\"./microbe.png\": 24,\n\t\"./science.png\": 25,\n\t\"./space.png\": 26,\n\t\"./terraforming-mars-icons.png\": 27\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 15;","module.exports = __webpack_public_path__ + \"static/media/animal.db449f30.png\";","module.exports = __webpack_public_path__ + \"static/media/building.3658288f.png\";","module.exports = __webpack_public_path__ + \"static/media/city.dd2118e6.png\";","module.exports = __webpack_public_path__ + \"static/media/earth.a61a6523.png\";","module.exports = __webpack_public_path__ + \"static/media/energy.85c4bf5c.png\";","module.exports = __webpack_public_path__ + \"static/media/event.5fe00ced.png\";","module.exports = __webpack_public_path__ + \"static/media/jovian.c077f899.png\";","module.exports = __webpack_public_path__ + \"static/media/leaf.0d8667d4.png\";","module.exports = __webpack_public_path__ + \"static/media/microbe.c78f6e8f.png\";","module.exports = __webpack_public_path__ + \"static/media/science.e815961d.png\";","module.exports = __webpack_public_path__ + \"static/media/space.ef80108a.png\";","module.exports = __webpack_public_path__ + \"static/media/terraforming-mars-icons.06ac25f4.png\";","import React from 'react';\nimport './App.css';\nconst localStorageKey = 'mars-icons';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.isLocalStorageSupported =\n\t\t\tlocalStorage && typeof localStorage.setItem === 'function' && typeof localStorage.getItem === 'function';\n\t\tthis.state = {};\n\t\tthis.resetValues();\n\n    if (this.isLocalStorageSupported) {\n      const values = localStorage.getItem(localStorageKey);\n      if (values) {\n        this.state = JSON.parse(values);\n      }\n    }\n\t}\n\n\tstoreStates() {\n    if(this.isLocalStorageSupported) {\n      localStorage.setItem(localStorageKey, JSON.stringify(this.state));\n    }\n\t}\n\n  resetValues() {\n    this.setState({\n      earth: 0,\n      jovian: 0,\n      science: 0,\n      space: 0,\n      building: 0,\n      event: 0,\n      city: 0,\n      energy: 0,\n      animal: 0,\n      leaf: 0,\n      microbe: 0\n    }, this.storeStates);\n  }\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n        <div className=\"icons\">\n          {Object.keys(this.state).map(key => {\n            return (\n              <div className=\"icon-container\" key={key}>\n                <div className=\"button-container\">\n                  <button className=\"btn\" onClick={() => {\n                    if (this.state[key] > 0) this.setState({ [key]: this.state[key] - 1 }, this.storeStates);\n                  }}>\n                    <i className=\"fa fa-minus-circle\"/>\n                  </button>\n                </div>\n                <div className=\"icon\" style={{ backgroundImage: 'url(' + require(`./img/${key}.png`) + ')' }}>\n\t\t\t\t\t\t\t\t<span class=\"icon-count\">\n\t\t\t\t\t\t\t\t\t{this.state[key]}\n\t\t\t\t\t\t\t\t</span>\n                </div>\n                <div className=\"button-container\">\n                  <button className=\"btn\" onClick={() => {\n                    this.setState({ [key]: this.state[key] + 1 }, this.storeStates);\n                  }}>\n                    <i className=\"fa fa-plus-circle\"/>\n                  </button>\n                </div>\n              </div>)\n          })}\n        </div>\n\n\t\t\t\t<div className=\"reset-button-container\">\n          <button type=\"button\" onClick={() => {\n            const isConfirmed = window.confirm('Are you sure you want to reset the counters?');\n            if (isConfirmed) this.resetValues();\n          }}>Reset</button>\n        </div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}